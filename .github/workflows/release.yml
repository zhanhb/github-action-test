name: publish

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'version number to release'
        required: true
      java-version:
        type: choice
        description: 'version of jdk to compile'
        default: '11'
        required: true
        options:
          - '8'
          - '11'
          - '17'

jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: ${{ github.event.inputs.java-version }}
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
      - uses: actions/cache@v2
        env:
          cache-name: maven-dependencies
        with:
          path: ~/.m2
          key: ${{ env.cache-name }}-${{ github.workflow }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ env.cache-name }}-${{ github.workflow }}
            ${{ env.cache-name }}-
      - name: mvnw scm:tag deploy site-deploy
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ github.token }}
          REVISION: ${{ github.event.inputs.release }}
        run: |
          [ -z "$GITHUB_ACTOR" ] || {
            git config --global user.name "$GITHUB_ACTOR"
            git config --global user.email "$(gh api "users/$GITHUB_ACTOR" -q '.email//"\(.id)+\(.login)@users.noreply.github.com"')"
          }
          ./mvnw -B --color=always -s .github/settings.xml -Prelease-profile "-Drevision=$REVISION" scm:tag deploy site-deploy
      - name: Github Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
          REVISION: ${{ github.event.inputs.release }}
        run: find . -type f -name "*-$REVISION.zip" -print0 | xargs -0 gh release -R "$GITHUB_REPOSITORY" create "$REVISION" --prerelease --target "$GITHUB_SHA"
      - name: Before Cache
        run: |
          ./mvnw -B --color=always build-helper:remove-project-artifact || :
          find ~/.m2/ -type d -name '*-SNAPSHOT' \( -exec rm -rf '{}' \; -prune \)
